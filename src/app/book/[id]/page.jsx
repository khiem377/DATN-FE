'use client';
import {
    BookOutlined,
    CaretRightOutlined,
    DollarOutlined,
    EditOutlined,
    EyeOutlined,
    HeartFilled,
    HeartOutlined,
    HomeOutlined,
    InfoCircleOutlined,
    MessageOutlined,
    MinusOutlined,
    NumberOutlined,
    PlusOutlined,
    ReadOutlined,
    ShareAltOutlined,
    ShoppingCartOutlined,
    UserOutlined,
} from '@ant-design/icons';
import {
    Avatar,
    Breadcrumb,
    Button,
    Card,
    Col,
    Collapse,
    Descriptions,
    Divider,
    Empty,
    Form,
    Image,
    Input,
    List,
    message,
    Modal,
    Progress,
    Rate,
    Row,
    Space,
    Spin,
    Tabs,
    Tag,
    Typography,
} from 'antd';
import { marked } from 'marked';
import { useParams, useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import ReactImageMagnify from 'react-image-magnify';
import { toast } from 'react-toastify';

// Import custom hooks
import { useBookDetail } from '../../hooks/useBookDetail';
import { useBookImages } from '../../hooks/useBookImages';
import { useCart } from '../../hooks/useCart';
import { useReviewActions } from '../../hooks/useReviewActions';
import { useReviews } from '../../hooks/useReviews';
import { useReviewStats } from '../../hooks/useReviewStats';
import { useSameAuthorBooks } from '../../hooks/useSameAuthorBooks';
import { useSameCategoryBooks } from '../../hooks/useSameCategoryBooks';
import { useUser } from '../../hooks/useUser';
import { useWishlist } from '../../hooks/useWishlist';

import './BookDetail.css';

// Sample BookList component (replace with your actual BookList if different)
const BookList = ({ books }) => {
    // Debug: Log ƒë·ªÉ xem books c√≥ data kh√¥ng
    console.log('üìö BookList received books:', books);
    console.log('üìä Books length:', books?.length);
    console.log('üìã Books type:', typeof books);
    console.log('üîç Is array?', Array.isArray(books));

    const getNames = (field) => {
        if (!field) return 'Kh√¥ng r√µ';
        if (Array.isArray(field)) {
            return field.map((item) => (typeof item === 'string' ? item : item.name)).join(', ');
        }
        if (typeof field === 'object' && field.name) return field.name;
        if (typeof field === 'string') return field;
        return 'Kh√¥ng r√µ';
    };

    // Debug: Ki·ªÉm tra books c√≥ empty kh√¥ng
    if (!books) {
        console.log('‚ùå Books is null/undefined');
        return <div>Books data is null/undefined</div>;
    }

    if (!Array.isArray(books)) {
        console.log('‚ùå Books is not an array:', typeof books);
        return <div>Books is not an array: {typeof books}</div>;
    }

    if (books.length === 0) {
        console.log('üì≠ Books array is empty');
        return <div>Books array is empty</div>;
    }

    // Debug: Log t·ª´ng book
    books.forEach((book, index) => {
        console.log(`üìñ Book ${index}:`, {
            id: book.id,
            title: book.title,
            author: book.author,
            category: book.category,
            publisher: book.publisher,
        });
    });

    return (
        <div className="book-list">
            <div style={{ marginBottom: '20px', padding: '10px', background: '#f0f0f0' }}>
                <strong>Debug Info:</strong> {books.length} books found
            </div>

            {books.map((book, index) => (
                <div
                    key={book.id || index}
                    className="book-item"
                    style={{
                        border: '1px solid #ddd',
                        padding: '15px',
                        margin: '10px 0',
                        borderRadius: '8px',
                    }}
                >
                    <h3>{book.title || 'No title'}</h3>

                    <div className="book-details">
                        <p>
                            <strong>ID:</strong> {book.id}
                        </p>
                        <p>
                            <strong>T√°c gi·∫£:</strong> {getNames(book.author)}
                        </p>
                        <p>
                            <strong>Th·ªÉ lo·∫°i:</strong> {getNames(book.category)}
                        </p>
                        <p>
                            <strong>NXB:</strong> {getNames(book.publisher)}
                        </p>
                        <p>
                            <strong>Gi√°:</strong>{' '}
                            {book.price ? `${Number(book.price).toLocaleString('vi-VN')} ƒë` : 'Ch∆∞a c√≥ gi√°'}
                        </p>
                        <p>
                            <strong>Rating:</strong> {book.rating_avg || 'Ch∆∞a c√≥ ƒë√°nh gi√°'}
                        </p>
                    </div>

                    {book.cover_image && (
                        <img
                            src={book.cover_image}
                            alt={book.title}
                            style={{ width: '100px', height: '150px', objectFit: 'cover' }}
                        />
                    )}

                    {/* Debug: Raw book data */}
                    <details style={{ marginTop: '10px' }}>
                        <summary>üîç Raw Data</summary>
                        <pre style={{ fontSize: '12px', background: '#f5f5f5', padding: '10px' }}>
                            {JSON.stringify(book, null, 2)}
                        </pre>
                    </details>
                </div>
            ))}
        </div>
    );
};

const { Title, Paragraph, Text } = Typography;
const { TextArea } = Input;
const { TabPane } = Tabs;

const BookDetailPage = () => {
    const router = useRouter();
    const params = useParams();
    const { id } = params;

    // Helper functions to safely extract string values from objects
    const getAuthorName = (author) => {
        if (!author) return 'Kh√¥ng r√µ';
        if (typeof author === 'string') return author;
        if (typeof author === 'object' && author.name) return author.name;
        return 'Kh√¥ng r√µ';
    };

    const getCategoryName = (category) => {
        if (!category) return 'Kh√¥ng r√µ';
        if (typeof category === 'string') return category;
        if (typeof category === 'object' && category.name) return category.name;
        return 'Kh√¥ng r√µ';
    };

    const getAuthorId = (author) => {
        if (!author) return null;
        if (typeof author === 'object' && author.id) return author.id;
        return null;
    };

    const getCategoryId = (category) => {
        if (!category) return null;
        if (typeof category === 'object' && category._id) return category._id;
        if (typeof category === 'object' && category.id) return category.id;
        return null;
    };

    // Local state
    const [showReviewModal, setShowReviewModal] = useState(false);
    const [selectedStarFilter, setSelectedStarFilter] = useState('all');
    const [quantity, setQuantity] = useState(1);
    const [isAddingToCart, setIsAddingToCart] = useState(false);
    const [mainImage, setMainImage] = useState(null);
    const [activeTab, setActiveTab] = useState('1');
    const [form] = Form.useForm();

    // Custom hooks
    const { book, isLoading: bookLoading, error: bookError, mutate: mutateBook } = useBookDetail(id);
    const { images, isLoading: imagesLoading } = useBookImages(book?.id);
    const { reviewStats, isLoading: statsLoading, mutate: mutateStats } = useReviewStats(book?.id);
    const { reviews, isLoading: reviewsLoading, mutate: mutateReviews } = useReviews(book?.id, selectedStarFilter);

    // Use helper functions for the hooks that need string values
    const { books: sameAuthorBooks, isLoading: authorBooksLoading } = useSameAuthorBooks(
        book?.author, // Truy·ªÅn c·∫£ object author
        book?.id,
    );

    const { books: sameCategoryBooks, isLoading: categoryBooksLoading } = useSameCategoryBooks(
        book?.category, // Truy·ªÅn c·∫£ object category
        book?.id,
    );

    const { wishlist, toggleWishlist, isLoading: wishlistLoading } = useWishlist();
    const { user, isLoggedIn, isLoading: userLoading } = useUser();
    const { addToCart } = useCart();
    const { checkCanReview, submitReview } = useReviewActions();

    // Debugging data structure
    useEffect(() => {
        console.log('book:', book);
        console.log('sameAuthorBooks:', sameAuthorBooks);
        console.log('sameCategoryBooks:', sameCategoryBooks);
    }, [book, sameAuthorBooks, sameCategoryBooks]);

    // Set main image when images load
    useEffect(() => {
        if (images.length > 0 && !mainImage) {
            const main = images.find((img) => img.is_main === 1);
            setMainImage(main?.image_url || images[0]?.image_url);
        }
    }, [images, mainImage]);

    // Add chapters data if ebook
    useEffect(() => {
        if (book && book.format === 'ebook' && !book.chaptersData) {
            const getRandomChapterTitle = () => {
                const titles = [
                    'Kh·ªüi ƒë·∫ßu cu·ªôc h√†nh tr√¨nh',
                    'B√≠ ·∫©n ƒë∆∞·ª£c h√© l·ªô',
                    'Cu·ªôc g·∫∑p g·ª° ƒë·ªãnh m·ªánh',
                    'Th·ª≠ th√°ch ƒë·∫ßu ti√™n',
                    'S·ª± th·∫≠t b·ªã che gi·∫•u',
                    'Chuy·ªÉn bi·∫øn b·∫•t ng·ªù',
                    'Cu·ªôc chi·∫øn quy·∫øt ƒë·ªãnh',
                    'Kho·∫£nh kh·∫Øc quan tr·ªçng',
                    'H·ªìi k·∫øt ƒë·∫ßy c·∫£m x√∫c',
                    'T∆∞∆°ng lai t∆∞∆°i s√°ng',
                ];
                return titles[Math.floor(Math.random() * titles.length)];
            };

            const chaptersData = [];
            const totalChapters = 10;

            for (let i = 1; i <= totalChapters; i++) {
                const pagesCount = Math.floor(Math.random() * 6) + 3;
                const pages = [];

                for (let j = 1; j <= pagesCount; j++) {
                    pages.push({
                        pageNumber: j,
                        content: `N·ªôi dung trang ${j} c·ªßa ch∆∞∆°ng ${i}. Lorem ipsum dolor sit amet, consectetur adipiscing elit.`,
                    });
                }

                chaptersData.push({
                    chapterNumber: i,
                    title: `Ch∆∞∆°ng ${i}: ${getRandomChapterTitle()}`,
                    pages: pages,
                    totalPages: pagesCount,
                });
            }

            // Update book data with chapters
            mutateBook(
                {
                    ...book,
                    chapters: totalChapters,
                    chaptersData: chaptersData,
                },
                false,
            );
        }
    }, [book, mutateBook]);

    // Event handlers
    const handleStarFilterChange = (starLevel) => {
        setSelectedStarFilter(starLevel);
    };

    const handleQuantityChange = (action) => {
        if (action === 'increase' && quantity < 99) {
            setQuantity((prev) => prev + 1);
        } else if (action === 'decrease' && quantity > 1) {
            setQuantity((prev) => prev - 1);
        }
    };

    const handleQuantityInputChange = (value) => {
        const numValue = parseInt(value) || 1;
        if (numValue >= 1 && numValue <= 99) {
            setQuantity(numValue);
        }
    };

    console.log(isLoggedIn);
    const handleSubmitReview = async (values) => {
        // S·ª≠ d·ª•ng isLoggedIn t·ª´ hook thay v√¨ g·ªçi checkUser
        if (!isLoggedIn) {
            toast.error('üîí Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√°!');
            // C√≥ th·ªÉ redirect ƒë·∫øn trang login
            router.push('/login');
            return;
        }

        try {
            const data = await submitReview(id, values.rating, values.comment);

            if (data.status) {
                message.success('ƒê√°nh gi√° c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!');
                setShowReviewModal(false);
                form.resetFields();

                // C·∫≠p nh·∫≠t l·∫°i data
                mutateStats();
                mutateReviews();
            } else {
                message.error(data.message || 'C√≥ l·ªói x·∫£y ra khi g·ª≠i ƒë√°nh gi√°!');
            }
        } catch (error) {
            console.error('Error submitting review:', error);

            // Handle specific error cases
            if (error.response?.status === 401) {
                toast.error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!');
                // Clear token v√† redirect
                localStorage.removeItem('token');
                router.push('/login');
            } else {
                message.error('C√≥ l·ªói x·∫£y ra khi g·ª≠i ƒë√°nh gi√°!');
            }
        }
    };

    const handleAddToCart = async () => {
        try {
            if (!isLoggedIn) {
                toast.error('üîí Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√°!');
                // C√≥ th·ªÉ redirect ƒë·∫øn trang login
                router.push('/login');
                return;
            }

            setIsAddingToCart(true);
            const result = await addToCart(book.id, quantity);

            if (result.success) {
                toast.success('üéâ ƒê√£ th√™m s√°ch v√†o gi·ªè h√†ng!');
            } else {
                toast.error(`üö´ ${result.message || result.error || 'Kh√¥ng th·ªÉ th√™m v√†o gi·ªè h√†ng'}`);
            }
        } catch (error) {
            toast.error(`üö® L·ªói h·ªá th·ªëng: ${error?.response?.data?.message || error.message || 'Kh√¥ng r√µ l·ªói'}`);
        } finally {
            setIsAddingToCart(false);
        }
    };

    const handleBuyNow = async () => {
        if (!isLoggedIn) {
            toast.error('üîí Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√°!');
            // C√≥ th·ªÉ redirect ƒë·∫øn trang login
            router.push('/login');
            return;
        }
        try {
            const checkoutData = {
                items: [
                    {
                        id: book.id,
                        name: book.title || book.name,
                        price: book.price,
                        quantity: 1,
                        image: book.cover_image,
                        author: getAuthorName(book.author),
                    },
                ],
                totalAmount: book.price,
                totalDiscount: 0,
            };

            setIsAddingToCart(true);
            toast.info('üîÑ ƒêang th√™m v√†o gi·ªè h√†ng...');

            const result = await addToCart(book.id, 1);

            if (result.success) {
                toast.success(`‚úÖ ƒê√£ th√™m "${book.title}" v√†o gi·ªè h√†ng!`);

                localStorage.setItem(
                    'buyNowData',
                    JSON.stringify({
                        isBuyNow: true,
                        bookId: book.id,
                        checkoutData,
                        processed: false,
                        timestamp: Date.now(),
                    }),
                );

                setTimeout(() => {
                    toast.info('üõí Chuy·ªÉn ƒë·∫øn trang ƒë·∫∑t ƒë∆°n...');
                    router.push('/cart');
                }, 800);
            } else {
                toast.error(`üö´ ${result.message || 'Kh√¥ng th·ªÉ th√™m v√†o gi·ªè h√†ng'}`);
            }
        } catch (error) {
            console.error('L·ªói khi th√™m v√†o gi·ªè h√†ng:', error);
            toast.error(`üö® L·ªói h·ªá th·ªëng: ${error.message}`);
        } finally {
            setIsAddingToCart(false);
        }
    };

    const handleToggleWishlist = async () => {
        if (!isLoggedIn) {
            toast.error('üîí Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√°!');
            // C√≥ th·ªÉ redirect ƒë·∫øn trang login
            router.push('/login');
            return;
        }

        const success = await toggleWishlist(book.id);
        if (success) {
            const isInWishlist = wishlist.includes(book.id);
            toast.success(isInWishlist ? 'ƒê√£ th√™m v√†o y√™u th√≠ch!' : 'ƒê√£ x√≥a kh·ªèi y√™u th√≠ch!');
        } else {
            toast.error('C√≥ l·ªói x·∫£y ra!');
        }
    };

    const handleOpenReviewModal = async () => {
        if (!isLoggedIn) {
            toast.error('üîí Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√°!');
            // C√≥ th·ªÉ redirect ƒë·∫øn trang login
            router.push('/login');
            return;
        }

        const { canReview, message: msg } = await checkCanReview(book.id);
        if (!canReview) {
            toast.error(msg);
            return;
        }

        setShowReviewModal(true);
    };

    // Utility functions
    const formatPrice = (price) => {
        if (book?.is_physical === 1) {
            return new Intl.NumberFormat('vi-VN').format(price);
        }
        return 'mi·ªÖn ph√≠';
    };

    // Render functions
    const renderStats = () => {
        const baseStats = [
            {
                title: 'L∆∞·ª£t xem',
                value: book?.views || 0,
                prefix: <EyeOutlined />,
                color: '#3f8600',
            },
            {
                title: 'Gi√°',
                value: (
                    <span style={{ color: 'red' }}>
                        <DollarOutlined /> {formatPrice(book?.price)} {book?.is_physical === 1 ? 'VND' : ''}
                    </span>
                ),
                color: 'red',
            },
        ];

        if (book?.format === 'ebook') {
            baseStats.push({
                title: 'S·ªë ch∆∞∆°ng',
                value: book.chapters || 0,
                prefix: <NumberOutlined />,
                color: '#1890ff',
            });
        }

        return baseStats;
    };

    const renderReviewStats = () => {
        if (statsLoading) {
            return (
                <Card className="review-stats-card" bordered={false}>
                    <Spin />
                </Card>
            );
        }

        return (
            <Card
                title={
                    <Space>
                        <Text strong style={{ fontSize: '16px' }}>
                            T√≥m t·∫Øt ƒë√°nh gi√°
                        </Text>
                        <InfoCircleOutlined style={{ color: '#8c8c8c' }} />
                    </Space>
                }
                className="review-stats-card"
                bordered={false}
            >
                <Row gutter={[32, 24]} align="middle">
                    <Col xs={24} md={12} lg={8}>
                        <div className="overall-rating" style={{ textAlign: 'center' }}>
                            <div
                                className="rating-number"
                                style={{
                                    fontSize: '48px',
                                    fontWeight: 'bold',
                                    color: '#262626',
                                    lineHeight: 1,
                                }}
                            >
                                {reviewStats?.totalReviews > 0 ? reviewStats.averageRating.toFixed(1) : '0'}
                            </div>
                            <div className="rating-stars" style={{ margin: '8px 0' }}>
                                <Rate
                                    disabled
                                    value={reviewStats?.totalReviews > 0 ? reviewStats.averageRating : 0}
                                    allowHalf
                                    style={{ fontSize: '20px' }}
                                />
                            </div>
                            <div
                                className="rating-count"
                                style={{
                                    color: '#8c8c8c',
                                    fontSize: '14px',
                                }}
                            >
                                {reviewStats?.totalReviews || 0} ƒë√°nh gi√°
                            </div>
                        </div>
                    </Col>

                    <Col xs={24} md={12} lg={16}>
                        {reviewStats?.totalReviews > 0 ? (
                            <div className="rating-breakdown">
                                {[5, 4, 3, 2, 1].map((rating) => (
                                    <div
                                        key={rating}
                                        className="rating-row"
                                        onClick={() => handleStarFilterChange(rating.toString())}
                                        style={{
                                            cursor: 'pointer',
                                            display: 'flex',
                                            alignItems: 'center',
                                            marginBottom: '8px',
                                            padding: '4px 0',
                                        }}
                                    >
                                        <span
                                            className="rating-label"
                                            style={{
                                                minWidth: '12px',
                                                textAlign: 'center',
                                                marginRight: '8px',
                                                fontSize: '14px',
                                            }}
                                        >
                                            {rating}
                                        </span>
                                        <Progress
                                            percent={reviewStats.starPercentages?.[rating] || 0}
                                            showInfo={false}
                                            strokeColor="#faad14"
                                            size="small"
                                            style={{
                                                flex: 1,
                                                margin: '0 12px',
                                                height: '8px',
                                            }}
                                        />
                                        <span
                                            className="rating-count-small"
                                            style={{
                                                minWidth: '30px',
                                                textAlign: 'right',
                                                fontSize: '14px',
                                                color: '#595959',
                                            }}
                                        >
                                            {reviewStats.ratingDistribution?.[rating] || 0}
                                        </span>
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <div
                                style={{
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    height: '120px',
                                    color: '#8c8c8c',
                                    fontSize: '14px',
                                }}
                            >
                                Ch∆∞a c√≥ ƒë√°nh gi√° n√†o
                            </div>
                        )}

                        <Divider style={{ margin: '16px 0' }} />

                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                            <Button
                                type="link"
                                onClick={() => handleStarFilterChange('all')}
                                style={{
                                    padding: 0,
                                    fontSize: '14px',
                                    color: '#1890ff',
                                }}
                            >
                                ‚Üí Xem t·∫•t c·∫£ ƒë√°nh gi√°
                            </Button>

                            <Button type="primary" icon={<EditOutlined />} onClick={handleOpenReviewModal} size="small">
                                Vi·∫øt ƒë√°nh gi√°
                            </Button>
                        </div>
                    </Col>
                </Row>
            </Card>
        );
    };

    const renderReviews = () => {
        if (reviewsLoading) {
            return <Spin />;
        }

        if (!reviews || reviews.length === 0) {
            return <Empty description="Ch∆∞a c√≥ ƒë√°nh gi√° n√†o" image={Empty.PRESENTED_IMAGE_SIMPLE} />;
        }

        return (
            <List
                dataSource={reviews}
                renderItem={(review) => (
                    <List.Item>
                        <List.Item.Meta
                            avatar={<Avatar src={review.user?.avatar} icon={<UserOutlined />} />}
                            title={
                                <Space>
                                    <Text strong>{review.user?.name || 'Ng∆∞·ªùi d√πng ·∫©n danh'}</Text>
                                    <Rate disabled defaultValue={review.rating} style={{ fontSize: '12px' }} />
                                    <Text type="secondary" style={{ fontSize: '12px' }}>
                                        {review.timeAgo}
                                    </Text>
                                </Space>
                            }
                            description={
                                <div>
                                    <Paragraph style={{ marginBottom: 8 }}>{review.comment}</Paragraph>
                                    <Space>
                                        <Button type="text" size="small" icon={<MessageOutlined />}>
                                            Ph·∫£n h·ªìi
                                        </Button>
                                        <Text type="secondary">{review.likes} l∆∞·ª£t th√≠ch</Text>
                                    </Space>
                                </div>
                            }
                        />
                    </List.Item>
                )}
            />
        );
    };

    const renderBookImages = () => {
        if (imagesLoading) {
            return <Spin />;
        }

        if (!images || images.length === 0) {
            return (
                <div style={{ textAlign: 'center', padding: '40px' }}>
                    <Image
                        src={book?.cover_image || '/placeholder-book.jpg'}
                        alt={book?.title}
                        width={300}
                        height={400}
                        style={{ objectFit: 'cover' }}
                    />
                </div>
            );
        }

        return (
            <div>
                <div style={{ textAlign: 'center', marginBottom: '16px' }}>
                    <ReactImageMagnify
                        {...{
                            smallImage: {
                                alt: book?.title,
                                isFluidWidth: true,
                                src: mainImage || book?.cover_image,
                            },
                            largeImage: {
                                src: mainImage || book?.cover_image,
                                width: 1200,
                                height: 1800,
                            },
                            enlargedImageContainerStyle: { zIndex: 1500 },
                        }}
                        style={{ maxWidth: '300px', maxHeight: '400px' }}
                    />
                </div>

                {images.length > 1 && (
                    <div style={{ display: 'flex', gap: '8px', justifyContent: 'center', flexWrap: 'wrap' }}>
                        {images.map((img, index) => (
                            <div
                                key={index}
                                style={{
                                    width: '60px',
                                    height: '80px',
                                    cursor: 'pointer',
                                    border: mainImage === img.image_url ? '2px solid #1890ff' : '1px solid #d9d9d9',
                                    borderRadius: '4px',
                                    overflow: 'hidden',
                                }}
                                onClick={() => setMainImage(img.image_url)}
                            >
                                <Image
                                    src={img.image_url}
                                    alt={`${book?.title} - ${index + 1}`}
                                    width={60}
                                    height={80}
                                    style={{ objectFit: 'cover' }}
                                    preview={false}
                                />
                            </div>
                        ))}
                    </div>
                )}
            </div>
        );
    };

    // Loading state
    if (bookLoading || userLoading) {
        return (
            <div style={{ textAlign: 'center', padding: '100px 0' }}>
                <Spin size="large" />
            </div>
        );
    }

    // Error state
    if (bookError || !book) {
        return (
            <div style={{ textAlign: 'center', padding: '100px 0' }}>
                <Empty description="Kh√¥ng t√¨m th·∫•y s√°ch" />
            </div>
        );
    }

    return (
        <div className="book-detail-page" style={{ padding: '24px' }}>
            {/* Breadcrumb */}
            <Breadcrumb style={{ marginBottom: '24px' }}>
                <Breadcrumb.Item>
                    <HomeOutlined />
                    <span>Trang ch·ªß</span>
                </Breadcrumb.Item>
                <Breadcrumb.Item>
                    <BookOutlined />
                    <span>S√°ch</span>
                </Breadcrumb.Item>
                <Breadcrumb.Item>{book.title}</Breadcrumb.Item>
            </Breadcrumb>

            <Row gutter={[24, 24]}>
                {/* Left Column - Book Images */}
                <Col xs={24} md={8} lg={6}>
                    <Card bordered={false}>{renderBookImages()}</Card>
                </Col>

                {/* Middle Column - Book Info */}
                <Col xs={24} md={12} lg={12}>
                    <Card bordered={false}>
                        <Title level={2} style={{ marginBottom: '16px' }}>
                            {book.title}
                        </Title>

                        <Descriptions column={1} size="small" style={{ marginBottom: '24px' }}>
                            <Descriptions.Item label="T√°c gi·∫£">
                                <Text strong>{getAuthorName(book?.author)}</Text>
                            </Descriptions.Item>
                            <Descriptions.Item label="Th·ªÉ lo·∫°i">
                                <Tag color="blue">{getCategoryName(book?.category)}</Tag>
                            </Descriptions.Item>
                            <Descriptions.Item label="Nh√† xu·∫•t b·∫£n">
                                {/* <Text>{safeRender(book?.publisher)}</Text> */}
                            </Descriptions.Item>
                            <Descriptions.Item label="NƒÉm xu·∫•t b·∫£n">
                                {/* <Text>{safeRender(book?.publication_year)}</Text> */}
                            </Descriptions.Item>
                            <Descriptions.Item label="ƒê·ªãnh d·∫°ng">
                                <Tag color={book?.format === 'ebook' ? 'green' : 'orange'}>
                                    {book?.format === 'ebook' ? 'S√°ch ƒëi·ªán t·ª≠' : 'S√°ch gi·∫•y'}
                                </Tag>
                            </Descriptions.Item>
                        </Descriptions>

                        {/* Stats */}
                        <Row gutter={[16, 16]} style={{ marginBottom: '24px' }}>
                            {renderStats().map((stat, index) => (
                                <Col span={8} key={index}>
                                    <Card size="small" style={{ textAlign: 'center' }}>
                                        <Space>
                                            {stat.prefix}
                                            <Text style={{ color: stat.color }}>
                                                {stat.title && `${stat.title}: `}
                                                {stat.value}
                                            </Text>
                                        </Space>
                                    </Card>
                                </Col>
                            ))}
                        </Row>

                        {/* Description */}
                        <Collapse ghost>
                            <Collapse.Panel
                                header={<Text strong>M√¥ t·∫£ s√°ch</Text>}
                                key="1"
                                extra={<CaretRightOutlined />}
                            >
                                <div
                                    dangerouslySetInnerHTML={{
                                        __html: marked(book.description || 'Ch∆∞a c√≥ m√¥ t·∫£'),
                                    }}
                                />
                            </Collapse.Panel>
                        </Collapse>
                    </Card>
                </Col>

                {/* Right Column - Actions */}
                <Col xs={24} md={4} lg={6}>
                    <Card title="Thao t√°c" bordered={false}>
                        <Space direction="vertical" style={{ width: '100%' }}>
                            {/* Price */}
                            <div style={{ textAlign: 'center', marginBottom: '16px' }}>
                                <Text style={{ fontSize: '24px', fontWeight: 'bold', color: 'red' }}>
                                    {formatPrice(book.price)} {book.is_physical === 1 ? 'VND' : ''}
                                </Text>
                            </div>

                            {/* Quantity */}
                            {book.is_physical === 1 && (
                                <div>
                                    <Text strong>S·ªë l∆∞·ª£ng:</Text>
                                    <div style={{ display: 'flex', alignItems: 'center', marginTop: '8px' }}>
                                        <Button
                                            icon={<MinusOutlined />}
                                            size="small"
                                            onClick={() => handleQuantityChange('decrease')}
                                            disabled={quantity <= 1}
                                        />
                                        <Input
                                            value={quantity}
                                            onChange={(e) => handleQuantityInputChange(e.target.value)}
                                            style={{ width: '60px', textAlign: 'center', margin: '0 8px' }}
                                            size="small"
                                        />
                                        <Button
                                            icon={<PlusOutlined />}
                                            size="small"
                                            onClick={() => handleQuantityChange('increase')}
                                            disabled={quantity >= 99}
                                        />
                                    </div>
                                </div>
                            )}

                            {/* Action Buttons */}
                            <Button
                                type="primary"
                                size="large"
                                block
                                icon={<ShoppingCartOutlined />}
                                onClick={handleBuyNow}
                                loading={isAddingToCart}
                            >
                                Mua ngay
                            </Button>

                            {book.is_physical === 1 && (
                                <Button
                                    size="large"
                                    block
                                    icon={<ShoppingCartOutlined />}
                                    onClick={handleAddToCart}
                                    loading={isAddingToCart}
                                >
                                    Th√™m v√†o gi·ªè h√†ng
                                </Button>
                            )}

                            <Button
                                size="large"
                                block
                                icon={
                                    wishlist?.includes(book.id) ? (
                                        <HeartFilled style={{ color: 'red' }} />
                                    ) : (
                                        <HeartOutlined />
                                    )
                                }
                                onClick={handleToggleWishlist}
                                loading={wishlistLoading}
                            >
                                {wishlist?.includes(book.id) ? 'ƒê√£ y√™u th√≠ch' : 'Th√™m v√†o y√™u th√≠ch'}
                            </Button>

                            {book.format === 'ebook' && (
                                <Button
                                    size="large"
                                    block
                                    icon={<ReadOutlined />}
                                    onClick={() => router.push(`/reader/${book.id}`)}
                                >
                                    ƒê·ªçc s√°ch
                                </Button>
                            )}

                            <Button size="large" block icon={<ShareAltOutlined />}>
                                Chia s·∫ª
                            </Button>
                        </Space>
                    </Card>
                </Col>
            </Row>

            {/* Tabs Section */}
            <Row style={{ marginTop: '32px' }}>
                <Col span={24}>
                    <Tabs activeKey={activeTab} onChange={setActiveTab}>
                        <TabPane tab="ƒê√°nh gi√°" key="1">
                            <div style={{ marginBottom: '24px' }}>{renderReviewStats()}</div>

                            {/* Star Filter */}
                            <div style={{ marginBottom: '16px' }}>
                                <Space>
                                    <Text>L·ªçc theo sao:</Text>
                                    <Button
                                        size="small"
                                        type={selectedStarFilter === 'all' ? 'primary' : 'default'}
                                        onClick={() => handleStarFilterChange('all')}
                                    >
                                        T·∫•t c·∫£
                                    </Button>
                                    {[5, 4, 3, 2, 1].map((star) => (
                                        <Button
                                            key={star}
                                            size="small"
                                            type={selectedStarFilter === star.toString() ? 'primary' : 'default'}
                                            onClick={() => handleStarFilterChange(star.toString())}
                                        >
                                            {star} sao
                                        </Button>
                                    ))}
                                </Space>
                            </div>

                            {renderReviews()}
                        </TabPane>

                        <TabPane tab="S√°ch c√πng t√°c gi·∫£" key="2">
                            {authorBooksLoading ? (
                                <div style={{ textAlign: 'center', padding: '40px' }}>
                                    <Spin size="large" />
                                </div>
                            ) : sameAuthorBooks.length > 0 ? (
                                <BookList books={sameAuthorBooks} />
                            ) : (
                                <Empty description="Kh√¥ng c√≥ s√°ch c√πng t√°c gi·∫£" />
                            )}
                        </TabPane>

                        <TabPane tab="S√°ch c√πng th·ªÉ lo·∫°i" key="3">
                            {categoryBooksLoading ? (
                                <div style={{ textAlign: 'center', padding: '40px' }}>
                                    <Spin size="large" />
                                </div>
                            ) : sameCategoryBooks.length > 0 ? (
                                <BookList books={sameCategoryBooks} />
                            ) : null}
                        </TabPane>

                        {book.format === 'ebook' && book.chaptersData && (
                            <TabPane tab="M·ª•c l·ª•c" key="4">
                                <List
                                    dataSource={book.chaptersData}
                                    renderItem={(chapter) => (
                                        <List.Item
                                            actions={[
                                                <Button
                                                    type="link"
                                                    icon={<ReadOutlined />}
                                                    onClick={() =>
                                                        router.push(
                                                            `/reader/${book.id}?chapter=${chapter.chapterNumber}`,
                                                        )
                                                    }
                                                >
                                                    ƒê·ªçc
                                                </Button>,
                                            ]}
                                        >
                                            <List.Item.Meta
                                                title={<Text strong>{chapter.title}</Text>}
                                                description={<Text type="secondary">{chapter.totalPages} trang</Text>}
                                            />
                                        </List.Item>
                                    )}
                                />
                            </TabPane>
                        )}
                    </Tabs>
                </Col>
            </Row>

            {/* Review Modal */}
            <Modal
                title="Vi·∫øt ƒë√°nh gi√°"
                open={showReviewModal}
                onCancel={() => {
                    setShowReviewModal(false);
                    form.resetFields();
                }}
                footer={null}
                width={600}
            >
                <Form form={form} layout="vertical" onFinish={handleSubmitReview}>
                    <Form.Item
                        name="rating"
                        label="ƒê√°nh gi√°"
                        rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn s·ªë sao!' }]}
                    >
                        <Rate allowHalf />
                    </Form.Item>

                    <Form.Item
                        name="comment"
                        label="Nh·∫≠n x√©t"
                        rules={[
                            { required: true, message: 'Vui l√≤ng nh·∫≠p nh·∫≠n x√©t!' },
                            { min: 10, message: 'Nh·∫≠n x√©t ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±!' },
                        ]}
                    >
                        <TextArea
                            rows={4}
                            placeholder="Chia s·∫ª c·∫£m nh·∫≠n c·ªßa b·∫°n v·ªÅ cu·ªën s√°ch n√†y..."
                            maxLength={500}
                            showCount
                        />
                    </Form.Item>

                    <Form.Item style={{ textAlign: 'right', marginBottom: 0 }}>
                        <Space>
                            <Button
                                onClick={() => {
                                    setShowReviewModal(false);
                                    form.resetFields();
                                }}
                            >
                                H·ªßy
                            </Button>
                            <Button type="primary" htmlType="submit">
                                G·ª≠i ƒë√°nh gi√°
                            </Button>
                        </Space>
                    </Form.Item>
                </Form>
            </Modal>
        </div>
    );
};

export default BookDetailPage;
