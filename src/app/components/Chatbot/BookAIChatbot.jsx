'use client';
import { BookOutlined, CloseOutlined, MessageOutlined, RobotOutlined, SendOutlined } from '@ant-design/icons';
import { Avatar, Badge, Button, FloatButton, Input, Spin, Typography } from 'antd';
import { useEffect, useRef, useState } from 'react';

const { TextArea } = Input;
const { Text } = Typography;

const SmartBookChatbot = () => {
    const [isOpen, setIsOpen] = useState(false);
    const [isHovered, setIsHovered] = useState(false);
    const [messages, setMessages] = useState([]);
    const [inputValue, setInputValue] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [allBooksData, setAllBooksData] = useState([]);
    const [authorsData, setAuthorsData] = useState([]);
    const [categoriesData, setCategoriesData] = useState([]);
    const [dataLoaded, setDataLoaded] = useState(false);
    const [chatInitialized, setChatInitialized] = useState(false);
    const messagesEndRef = useRef(null);
    const chatContainerRef = useRef(null);

    // API configuration
    const API_BASE = 'https://smartbook.io.vn/api';
    const GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY || 'AIzaSyDhZbONQYp7sPTaq_Wv83qRrQo3_FYCZhs';

    // Load chat from localStorage on component mount
    useEffect(() => {
        const savedMessages = localStorage.getItem('smartBookChatMessages');
        if (savedMessages) {
            try {
                const parsedMessages = JSON.parse(savedMessages);
                setMessages(parsedMessages);
            } catch (error) {
                console.error('Error loading saved messages:', error);
                initializeChat();
            }
        } else {
            initializeChat();
        }
        setChatInitialized(true);
    }, []);

    // Save messages to localStorage whenever messages change
    useEffect(() => {
        if (chatInitialized && messages.length > 0) {
            localStorage.setItem('smartBookChatMessages', JSON.stringify(messages));
        }
    }, [messages, chatInitialized]);

    // Initialize chat with welcome message
    const initializeChat = () => {
        const welcomeMessage = {
            id: 1,
            type: 'bot',
            content:
                'Ch√†o b·∫°n! M√¨nh l√† AI t∆∞ v·∫•n s√°ch th√¥ng minh! ü§ñüìö\n\nM√¨nh c√≥ th·ªÉ:\nüîç T√¨m s√°ch theo t√™n, t√°c gi·∫£, th·ªÉ lo·∫°i\nüí∞ T∆∞ v·∫•n s√°ch theo gi√° c·∫£\n‚≠ê G·ª£i √Ω s√°ch hay nh·∫•t\nüìñ K·ªÉ chi ti·∫øt n·ªôi dung s√°ch\nüõí H·ªó tr·ª£ mua s·∫Øm\n\nB·∫°n ƒëang mu·ªën t√¨m g√¨ n√†o? ‚ú®',
            timestamp: new Date(),
        };
        setMessages([welcomeMessage]);
    };

    // Load all data when chatbot opens
    useEffect(() => {
        if (isOpen && !dataLoaded) {
            loadAllData();
        }
    }, [isOpen]);

    // Auto-focus on chat container when opened
    useEffect(() => {
        if (isOpen && chatContainerRef.current) {
            chatContainerRef.current.focus();
        }
    }, [isOpen]);

    const loadAllData = async () => {
        try {
            const [booksRes, authorsRes, categoriesRes] = await Promise.all([
                fetch(`${API_BASE}/books`),
                fetch(`${API_BASE}/authors`),
                fetch(`${API_BASE}/categories`),
            ]);

            // Process books data
            const booksData = await booksRes.json();
            let allBooks = [];
            if (booksData.status === 'success') {
                const bookLists = [
                    ...(booksData.top_rated_books || []),
                    ...(booksData.top_viewed_books || []),
                    ...(booksData.latest_paper_books || []),
                    ...(booksData.latest_ebooks || []),
                ];
                allBooks = bookLists.filter((book, index, self) => index === self.findIndex((b) => b.id === book.id));
            }

            const authorsResult = await authorsRes.json();
            const authors = authorsResult.success ? authorsResult.data : [];

            const categoriesResult = await categoriesRes.json();
            const categories = categoriesResult.success ? categoriesResult.data : [];

            setAllBooksData(allBooks);
            setAuthorsData(authors);
            setCategoriesData(categories);
            setDataLoaded(true);

            console.log('Data loaded:', {
                books: allBooks.length,
                authors: authors.length,
                categories: categories.length,
            });
        } catch (error) {
            console.error('Error loading data:', error);
        }
    };

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    };

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    // Enhanced intelligent response generator with flexible handling
    const generateIntelligentResponse = (userMessage) => {
        const msg = userMessage.toLowerCase().trim();

        // Greeting responses
        if (msg.match(/^(ch√†o|hello|hi|xin ch√†o|hey|hii|helo)/)) {
            const greetings = [
                `Ch√†o b·∫°n nha! üòä M√¨nh c√≥ ${allBooksData.length} cu·ªën s√°ch ƒëang ch·ªù b·∫°n kh√°m ph√° ƒë·∫•y!\n\nB·∫°n mu·ªën t√¨m s√°ch g√¨ h√¥m nay?`,
                `Hello! üëã M√¨nh ƒë√£ chu·∫©n b·ªã s·∫µn ${categoriesData.length} th·ªÉ lo·∫°i s√°ch kh√°c nhau cho b·∫°n r·ªìi!\n\nB·∫°n quan t√¢m ƒë·∫øn th·ªÉ lo·∫°i n√†o nh·∫•t?`,
                `Ch√†o b·∫°n! ‚ú® V·ªõi ${authorsData.length} t√°c gi·∫£ n·ªïi ti·∫øng, m√¨nh tin ch·∫Øc s·∫Ω t√¨m ƒë∆∞·ª£c s√°ch ∆∞ng √Ω cho b·∫°n!\n\nC√πng b·∫Øt ƒë·∫ßu t√¨m ki·∫øm nh√©! üìö`,
            ];
            return greetings[Math.floor(Math.random() * greetings.length)];
        }

        // Flexible handling for "Ki·ªÅu" or classic literature requests
        if (msg.includes('ki·ªÅu') || msg.includes('truy·ªán ki·ªÅu') || msg.includes('kim v√¢n ki·ªÅu')) {
            return `√îi! B·∫°n h·ªèi v·ªÅ "Truy·ªán Ki·ªÅu" - t√°c ph·∫©m kinh ƒëi·ªÉn c·ªßa Nguy·ªÖn Du √°! üìö‚ú®\n\nHi·ªán t·∫°i trong kho c·ªßa m√¨nh ch∆∞a c√≥ "Truy·ªán Ki·ªÅu", nh∆∞ng ƒë√¢y l√† t√°c ph·∫©m vƒÉn h·ªçc c·ªï ƒëi·ªÉn r·∫•t n·ªïi ti·∫øng!\n\nüí° **M√¨nh c√≥ th·ªÉ g·ª£i √Ω:**\n‚Ä¢ S√°ch vƒÉn h·ªçc Vi·ªát Nam kh√°c\n‚Ä¢ S√°ch l·ªãch s·ª≠ v√† vƒÉn h√≥a\n‚Ä¢ C√°c t√°c ph·∫©m c·ªï ƒëi·ªÉn kh√°c\n\nHo·∫∑c b·∫°n c√≥ mu·ªën m√¨nh t√¨m s√°ch t∆∞∆°ng t·ª± v·ªÅ vƒÉn h·ªçc c·ªï ƒëi·ªÉn kh√¥ng? ü§î`;
        }

        // Handle requests for specific genres or types not available
        const unavailableRequests = {
            manga: 'Hi·ªán t·∫°i m√¨nh ch∆∞a c√≥ manga trong kho, nh∆∞ng c√≥ nhi·ªÅu truy·ªán tranh v√† comic kh√°c! üìñ',
            'light novel': 'Light novel th√¨ m√¨nh ch∆∞a c√≥, nh∆∞ng c√≥ th·ªÉ t√¨m ti·ªÉu thuy·∫øt v√† truy·ªán d√†i hay! üìö',
            webtoon: 'Webtoon m√¨nh ch∆∞a c√≥, nh∆∞ng c√≥ truy·ªán tranh v√† manga th√¨ c√≥ ƒë·∫•y! üé®',
            audibook: 'Audiobook m√¨nh ch∆∞a h·ªó tr·ª£, nh∆∞ng c√≥ ebook v√† s√°ch gi·∫•y! üéß‚û°Ô∏èüìñ',
        };

        for (let [key, response] of Object.entries(unavailableRequests)) {
            if (msg.includes(key)) {
                return `${response}\n\nB·∫°n c√≥ mu·ªën xem nh·ªØng g√¨ m√¨nh c√≥ kh√¥ng? Ho·∫∑c cho m√¨nh bi·∫øt th·ªÉ lo·∫°i b·∫°n th√≠ch! üòä`;
            }
        }

        // Help/guide requests
        if (msg.includes('gi√∫p') || msg.includes('h∆∞·ªõng d·∫´n') || msg.includes('l√†m g√¨') || msg.includes('h·ªó tr·ª£')) {
            return `M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n r·∫•t nhi·ªÅu th·ª© n√®! üöÄ\n\nüîç **T√¨m ki·∫øm th√¥ng minh:**\n‚Ä¢ "T√¨m s√°ch c·ªßa t√°c gi·∫£ [t√™n]"\n‚Ä¢ "S√°ch th·ªÉ lo·∫°i trinh th√°m"\n‚Ä¢ "S√°ch c√≥ t·ª´ 'y√™u' trong t√™n"\n\nüí∞ **T∆∞ v·∫•n gi√° c·∫£:**\n‚Ä¢ "S√°ch d∆∞·ªõi 100k"\n‚Ä¢ "S√°ch t·ª´ 50k ƒë·∫øn 150k"\n‚Ä¢ "S√°ch gi√° r·∫ª nh·∫•t"\n\n‚≠ê **G·ª£i √Ω th√¥ng minh:**\n‚Ä¢ "G·ª£i √Ω s√°ch hay nh·∫•t"\n‚Ä¢ "S√°ch ƒë∆∞·ª£c ƒë√°nh gi√° cao"\n‚Ä¢ "S√°ch b√°n ch·∫°y"\n\nüìñ **Chi ti·∫øt s√°ch:**\n‚Ä¢ G√µ t√™n s√°ch ƒë·ªÉ xem th√¥ng tin chi ti·∫øt\n‚Ä¢ M√¥ t·∫£ n·ªôi dung, gi√° c·∫£, t√¨nh tr·∫°ng kho\n\nTh·ª≠ ngay ƒëi! üòÑ`;
        }

        // Thank you responses
        if (msg.includes('c·∫£m ∆°n') || msg.includes('thanks') || msg.includes('thank you') || msg.includes('c√°m ∆°n')) {
            const thankResponses = [
                'Kh√¥ng c√≥ g√¨ ƒë√¢u b·∫°n! üòä M√¨nh lu√¥n s·∫µn s√†ng gi√∫p b·∫°n t√¨m s√°ch hay!',
                'Hihi, ƒë∆∞·ª£c gi√∫p b·∫°n l√† ni·ªÅm vui c·ªßa m√¨nh! ü§ó C√≤n c·∫ßn t∆∞ v·∫•n g√¨ n·ªØa kh√¥ng?',
                'Hehe, c·∫£m ∆°n b·∫°n nh√©! üíï C√≥ s√°ch n√†o kh√°c c·∫ßn t√¨m hi·ªÉu kh√¥ng?',
            ];
            return thankResponses[Math.floor(Math.random() * thankResponses.length)];
        }

        // Bye/goodbye responses
        if (
            msg.includes('bye') ||
            msg.includes('t·∫°m bi·ªát') ||
            msg.includes('ch√†o t·∫°m bi·ªát') ||
            msg.includes('goodbye')
        ) {
            const goodbyeResponses = [
                'T·∫°m bi·ªát b·∫°n nh√©! üëã H·∫πn g·∫∑p l·∫°i l·∫ßn sau, ch√∫c b·∫°n ƒë·ªçc s√°ch vui v·∫ª! üìö‚ú®',
                'Bye bye! ü•∞ Nh·ªõ quay l·∫°i t√¨m m√¨nh khi c·∫ßn t∆∞ v·∫•n s√°ch nha!',
                'Ch√†o b·∫°n! üåü Ch√∫c b·∫°n c√≥ nh·ªØng cu·ªën s√°ch hay v√† ng√†y tuy·ªát v·ªùi!',
            ];
            return goodbyeResponses[Math.floor(Math.random() * goodbyeResponses.length)];
        }

        // Author search with intelligent matching
        const authorKeywords = ['t√°c gi·∫£', 'author', 'vi·∫øt', 'c·ªßa'];
        if (authorKeywords.some((keyword) => msg.includes(keyword))) {
            const foundAuthor = authorsData.find(
                (author) =>
                    msg.includes(author.name.toLowerCase()) ||
                    author.name.toLowerCase().includes(msg.replace(/t√°c gi·∫£|author|vi·∫øt|c·ªßa/g, '').trim()),
            );

            if (foundAuthor) {
                const authorBooks = allBooksData.filter((book) => book.author?.id === foundAuthor.id);
                if (authorBooks.length > 0) {
                    let response = `Tuy·ªát! M√¨nh t√¨m th·∫•y ${authorBooks.length} cu·ªën s√°ch c·ªßa t√°c gi·∫£ **${foundAuthor.name}**! üìö‚ú®\n\n`;

                    authorBooks.slice(0, 5).forEach((book, index) => {
                        const price =
                            book.discount_price && book.discount_price !== '0.00'
                                ? `~~${formatPrice(book.price)}~~ **${formatPrice(book.discount_price)}** üî•`
                                : formatPrice(book.price);

                        response += `${index + 1}. üìñ **${book.title}**\n`;
                        response += `   üí∞ ${price}\n`;
                        response += `   üìö ${book.category?.name || 'Unknown'}\n`;
                        if (book.rating_avg !== '0.0') response += `   ‚≠ê ${book.rating_avg}/5\n`;
                        response += `   üì¶ ${book.stock > 0 ? 'C√≤n h√†ng ‚úÖ' : 'H·∫øt h√†ng üò¢'}\n\n`;
                    });

                    if (authorBooks.length > 5) {
                        response += `V√† c√≤n ${authorBooks.length - 5} cu·ªën kh√°c n·ªØa!\n\n`;
                    }

                    response += 'B·∫°n mu·ªën xem chi ti·∫øt cu·ªën n√†o kh√¥ng? üòä';
                    return response;
                } else {
                    return `T√°c gi·∫£ **${foundAuthor.name}** c√≥ trong danh s√°ch, nh∆∞ng hi·ªán t·∫°i ch∆∞a c√≥ s√°ch n√†o c·ªßa t√°c gi·∫£ n√†y trong kho.\n\nüîÑ M√¨nh s·∫Ω c·∫≠p nh·∫≠t khi c√≥ s√°ch m·ªõi!\n\nB·∫°n c√≥ mu·ªën xem s√°ch c·ªßa t√°c gi·∫£ kh√°c kh√¥ng? ü§î`;
                }
            }

            const randomAuthors = authorsData.sort(() => 0.5 - Math.random()).slice(0, 8);
            let response = `M√¨nh c√≥ ${authorsData.length} t√°c gi·∫£ trong h·ªá th·ªëng! M·ªôt s·ªë t√°c gi·∫£ n·ªïi b·∫≠t:\n\n`;
            randomAuthors.forEach((author, index) => {
                response += `${index + 1}. ${author.name}\n`;
            });
            response += `\nB·∫°n mu·ªën t√¨m s√°ch c·ªßa t√°c gi·∫£ n√†o? G√µ t√™n ƒë·ªÉ m√¨nh t√¨m gi√∫p nha! üòä`;
            return response;
        }

        // Category search with intelligent matching
        const categoryKeywords = ['th·ªÉ lo·∫°i', 'category', 'lo·∫°i s√°ch', 'genre'];
        const foundCategory = categoriesData.find(
            (cat) => msg.includes(cat.name.toLowerCase()) || categoryKeywords.some((keyword) => msg.includes(keyword)),
        );

        if (foundCategory) {
            const categoryBooks = allBooksData.filter((book) => book.category?.id === foundCategory.id);
            if (categoryBooks.length > 0) {
                let response = `T√¨m th·∫•y ${categoryBooks.length} cu·ªën s√°ch **${foundCategory.name}**! üéØ\n\n`;

                const topBooks = categoryBooks
                    .sort((a, b) => (parseFloat(b.rating_avg) || 0) - (parseFloat(a.rating_avg) || 0))
                    .slice(0, 4);

                topBooks.forEach((book, index) => {
                    const price =
                        book.discount_price && book.discount_price !== '0.00'
                            ? `~~${formatPrice(book.price)}~~ **${formatPrice(book.discount_price)}** üî•`
                            : formatPrice(book.price);

                    response += `${index + 1}. üìñ **${book.title}**\n`;
                    response += `   ‚úçÔ∏è ${book.author?.name || 'Unknown'}\n`;
                    response += `   üí∞ ${price}\n`;
                    if (book.rating_avg !== '0.0') response += `   ‚≠ê ${book.rating_avg}/5\n`;
                    response += `   üì¶ ${book.stock > 0 ? 'C√≤n h√†ng' : 'H·∫øt h√†ng'}\n\n`;
                });

                response += `B·∫°n mu·ªën xem th√™m s√°ch ${foundCategory.name} kh√°c kh√¥ng? üòä`;
                return response;
            }
        }

        if (categoryKeywords.some((keyword) => msg.includes(keyword))) {
            let response = `M√¨nh c√≥ ${categoriesData.length} th·ªÉ lo·∫°i s√°ch ƒëa d·∫°ng:\n\n`;
            categoriesData.forEach((cat, index) => {
                const count = allBooksData.filter((book) => book.category?.id === cat.id).length;
                response += `${index + 1}. **${cat.name}** (${count} cu·ªën)\n`;
            });
            response += `\nB·∫°n quan t√¢m th·ªÉ lo·∫°i n√†o? G√µ t√™n ƒë·ªÉ m√¨nh t√¨m s√°ch cho b·∫°n! üìö`;
            return response;
        }

        // Intelligent price search
        const pricePatterns = [
            /(\d+)\s*k?\s*(?:ƒë·∫øn|t·ªõi|ƒë·∫øn|-|~)\s*(\d+)\s*k?/,
            /d∆∞·ªõi\s*(\d+)\s*k?/,
            /tr√™n\s*(\d+)\s*k?/,
            /kho·∫£ng\s*(\d+)\s*k?/,
            /(\d+)\s*k?\s*(?:ngh√¨n|ng√†n)/,
        ];

        for (let pattern of pricePatterns) {
            const match = msg.match(pattern);
            if (match) {
                return handlePriceSearch(match, msg);
            }
        }

        // Recommendation requests
        const recommendKeywords = ['g·ª£i √Ω', 'ƒë·ªÅ xu·∫•t', 'recommend', 's√°ch hay', 'n√™n ƒë·ªçc', 't·ªët nh·∫•t', 'bestseller'];
        if (recommendKeywords.some((keyword) => msg.includes(keyword))) {
            return generateRecommendations();
        }

        // Specific book search
        const possibleBook = findBookByTitle(msg);
        if (possibleBook) {
            return generateBookDetails(possibleBook);
        }

        // Handle random/unclear queries with flexible responses
        return generateFlexibleDefault(msg);
    };

    // Enhanced flexible default response
    const generateFlexibleDefault = (msg) => {
        // Keywords analysis for better responses
        const keywordResponses = {
            r·∫ª: 'B·∫°n mu·ªën t√¨m s√°ch gi√° r·∫ª √†? G√µ "s√°ch d∆∞·ªõi 100k" ƒë·ªÉ m√¨nh t√¨m gi√∫p nha! üí∞',
            m·ªõi: 'Mu·ªën xem s√°ch m·ªõi nh·∫•t? M√¨nh c√≥ nhi·ªÅu s√°ch hot ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·∫•y! üî•',
            hay: 'T√¨m s√°ch hay? G√µ "g·ª£i √Ω s√°ch hay" ƒë·ªÉ m√¨nh recommend nh√©! ‚≠ê',
            y√™u: 'T√¨m s√°ch v·ªÅ t√¨nh y√™u? Th·ª≠ "s√°ch ng√¥n t√¨nh" ho·∫∑c t√™n s√°ch c·ª• th·ªÉ! üíï',
            'trinh th√°m': '√îi fan trinh th√°m n√®! G√µ "s√°ch trinh th√°m" ƒë·ªÉ xem collection c·ªßa m√¨nh! üïµÔ∏è',
            'l·ªãch s·ª≠': 'Quan t√¢m ƒë·∫øn l·ªãch s·ª≠? M√¨nh c√≥ m·ª•c "s√°ch l·ªãch s·ª≠" ƒë·∫•y! üìú',
            't√¢m l√Ω': 'S√°ch t√¢m l√Ω r·∫•t hay! Th·ª≠ t√¨m "s√°ch ph√°t tri·ªÉn b·∫£n th√¢n" nh√©! üß†',
            'kinh doanh': 'S√°ch kinh doanh? M√¨nh c√≥ "s√°ch ƒë·ªùi s·ªëng" c√≥ th·ªÉ ph√π h·ª£p! üíº',
            'n·∫•u ƒÉn': 'S√°ch n·∫•u ƒÉn hi·ªán m√¨nh ch∆∞a c√≥, nh∆∞ng c√≥ "s√°ch ƒë·ªùi s·ªëng" hay l·∫Øm! üë®‚Äçüç≥',
            'du l·ªãch': 'S√°ch du l·ªãch √†? Hi·ªán ch∆∞a c√≥, nh∆∞ng c√≥ th·ªÉ t√¨m trong "s√°ch ƒë·ªùi s·ªëng"! ‚úàÔ∏è',
        };

        for (let [keyword, response] of Object.entries(keywordResponses)) {
            if (msg.includes(keyword)) {
                return `${response}\n\nüí° **Ho·∫∑c b·∫°n c√≥ th·ªÉ:**\nüîç G√µ t√™n s√°ch c·ª• th·ªÉ\nüë§ T√¨m theo t√°c gi·∫£\nüìö Xem theo th·ªÉ lo·∫°i\nüí∞ T√¨m theo gi√° c·∫£\n\nC·ª© tho·∫£i m√°i h·ªèi m√¨nh nh√©! üòä`;
            }
        }

        // If no keywords match, provide a friendly and encouraging response
        const encouragingResponses = [
            `Hmm, m√¨nh ch∆∞a hi·ªÉu r√µ √Ω b·∫°n l·∫Øm! ü§î Nh∆∞ng ƒë·ª´ng lo, m√¨nh c√≥ ${allBooksData.length} cu·ªën s√°ch v√† lu√¥n s·∫µn s√†ng gi√∫p b·∫°n t√¨m ki·∫øm!`,
            `∆†, c√≥ v·∫ª nh∆∞ b·∫°n ƒëang t√¨m g√¨ ƒë√≥ ƒë·∫∑c bi·ªát nh·ªâ? üòÑ V·ªõi ${categoriesData.length} th·ªÉ lo·∫°i s√°ch, ch·∫Øc ch·∫Øn s·∫Ω c√≥ g√¨ ƒë√≥ d√†nh cho b·∫°n!`,
            `B·∫°n ∆°i, m√¨nh mu·ªën gi√∫p nh∆∞ng ch∆∞a hi·ªÉu r√µ y√™u c·∫ßu! üòÖ C√πng t√¨m hi·ªÉu xem ${authorsData.length} t√°c gi·∫£ c·ªßa m√¨nh c√≥ ai b·∫°n th√≠ch kh√¥ng nh√©!`,
        ];

        const randomResponse = encouragingResponses[Math.floor(Math.random() * encouragingResponses.length)];

        return `${randomResponse}\n\nüéØ **Th·ª≠ nh·ªØng c√°ch n√†y nh√©:**\n‚Ä¢ "G·ª£i √Ω s√°ch hay nh·∫•t"\n‚Ä¢ "S√°ch c·ªßa [t√™n t√°c gi·∫£]"\n‚Ä¢ "S√°ch [th·ªÉ lo·∫°i]"\n‚Ä¢ "S√°ch t·ª´ [gi√°] ƒë·∫øn [gi√°]"\n‚Ä¢ Ho·∫∑c g√µ t√™n s√°ch c·ª• th·ªÉ\n\nM√¨nh lu√¥n ·ªü ƒë√¢y ƒë·ªÉ gi√∫p b·∫°n! ü§ó`;
    };

    const handlePriceSearch = (match, originalMsg) => {
        let minPrice = 0,
            maxPrice = Infinity;

        if (originalMsg.includes('d∆∞·ªõi')) {
            maxPrice = parseInt(match[1]) * (match[1].length <= 3 ? 1000 : 1);
        } else if (originalMsg.includes('tr√™n')) {
            minPrice = parseInt(match[1]) * (match[1].length <= 3 ? 1000 : 1);
        } else if (originalMsg.includes('kho·∫£ng')) {
            const price = parseInt(match[1]) * (match[1].length <= 3 ? 1000 : 1);
            minPrice = price * 0.8;
            maxPrice = price * 1.2;
        } else if (match[2]) {
            minPrice = parseInt(match[1]) * (match[1].length <= 3 ? 1000 : 1);
            maxPrice = parseInt(match[2]) * (match[2].length <= 3 ? 1000 : 1);
        }

        const booksInRange = allBooksData.filter((book) => {
            const price =
                book.discount_price && book.discount_price !== '0.00'
                    ? parseFloat(book.discount_price)
                    : parseFloat(book.price || 0);
            return price >= minPrice && price <= maxPrice && book.stock > 0;
        });

        if (booksInRange.length > 0) {
            let response = `T√¨m th·∫•y ${booksInRange.length} cu·ªën s√°ch trong t·∫ßm gi√° c·ªßa b·∫°n! üí∞‚ú®\n\n`;

            const sortedBooks = booksInRange
                .sort((a, b) => {
                    const ratingA = parseFloat(a.rating_avg) || 0;
                    const ratingB = parseFloat(b.rating_avg) || 0;
                    return ratingB - ratingA;
                })
                .slice(0, 5);

            sortedBooks.forEach((book, index) => {
                const price =
                    book.discount_price && book.discount_price !== '0.00'
                        ? `~~${formatPrice(book.price)}~~ **${formatPrice(book.discount_price)}** üî•`
                        : formatPrice(book.price);

                response += `${index + 1}. üìö **${book.title}**\n`;
                response += `   ‚úçÔ∏è ${book.author?.name || 'Unknown'}\n`;
                response += `   üí∞ ${price}\n`;
                response += `   üìö ${book.category?.name || 'Unknown'}\n`;
                if (book.rating_avg !== '0.0') response += `   ‚≠ê ${book.rating_avg}/5\n`;
                response += '\n';
            });

            response += 'B·∫°n mu·ªën xem chi ti·∫øt cu·ªën n√†o kh√¥ng? üòä';
            return response;
        } else {
            return `Hmm, hi·ªán t·∫°i m√¨nh kh√¥ng t√¨m th·∫•y s√°ch n√†o trong t·∫ßm gi√° n√†y! üòÖ\n\nüí° **B·∫°n c√≥ th·ªÉ:**\n‚Ä¢ TƒÉng ng√¢n s√°ch m·ªôt ch√∫t?\n‚Ä¢ Xem s√°ch ƒëang khuy·∫øn m√£i üî•\n‚Ä¢ T√¨m ebook gi√° r·∫ª h∆°n üì±\n‚Ä¢ Xem s√°ch mi·ªÖn ph√≠ üÜì\n\nM√¨nh lu√¥n s·∫µn s√†ng t∆∞ v·∫•n th√™m! üí™`;
        }
    };

    const generateRecommendations = () => {
        const topRated = allBooksData
            .filter((book) => parseFloat(book.rating_avg) > 0)
            .sort((a, b) => parseFloat(b.rating_avg) - parseFloat(a.rating_avg))
            .slice(0, 3);

        const onSale = allBooksData.filter((book) => book.discount_price && book.discount_price !== '0.00').slice(0, 2);

        let response = `ƒê√¢y l√† nh·ªØng g·ª£i √Ω s√°ch tuy·ªát v·ªùi nh·∫•t c·ªßa m√¨nh! ‚≠ê\n\n`;

        if (topRated.length > 0) {
            response += `üèÜ **S√ÅCH ƒê∆Ø·ª¢C ƒê√ÅNH GI√Å CAO NH·∫§T:**\n`;
            topRated.forEach((book, index) => {
                response += `${index + 1}. **${book.title}** - ${book.author?.name}\n`;
                response += `   ‚≠ê ${book.rating_avg}/5 | ${formatPrice(book.price)}\n\n`;
            });
        }

        if (onSale.length > 0) {
            response += `üî• **ƒêANG KHUY·∫æN M√ÉI:**\n`;
            onSale.forEach((book, index) => {
                response += `${index + 1}. **${book.title}**\n`;
                response += `   üí∞ ~~${formatPrice(book.price)}~~ **${formatPrice(book.discount_price)}**\n\n`;
            });
        }

        response += 'Cu·ªën n√†o b·∫°n th·∫•y h·∫•p d·∫´n nh·∫•t? M√¨nh k·ªÉ chi ti·∫øt h∆°n nha! üòä';
        return response;
    };

    const findBookByTitle = (searchText) => {
        const cleanSearch = searchText.toLowerCase().replace(/["']/g, '');
        return allBooksData.find(
            (book) =>
                book.title?.toLowerCase().includes(cleanSearch) || cleanSearch.includes(book.title?.toLowerCase()),
        );
    };

    const generateBookDetails = (book) => {
        const price =
            book.discount_price && book.discount_price !== '0.00'
                ? `~~${formatPrice(book.price)}~~ **${formatPrice(book.discount_price)}** (ƒêang sale! üî•)`
                : formatPrice(book.price);

        const description = book.description?.replace(/<[^>]*>/g, '').substring(0, 300) || 'Ch∆∞a c√≥ m√¥ t·∫£ chi ti·∫øt';

        let response = `T√¨m th·∫•y r·ªìi! Cu·ªën n√†y hay l·∫Øm! üìö‚ú®\n\n`;
        response += `üìñ **${book.title}**\n\n`;
        response += `üë®‚Äçüíº **T√°c gi·∫£:** ${book.author?.name || 'Unknown'}\n`;
        response += `üìö **Th·ªÉ lo·∫°i:** ${book.category?.name || 'Unknown'}\n`;
        response += `üì∞ **NXB:** ${book.publisher?.name || 'Unknown'}\n`;
        response += `üí∞ **Gi√°:** ${price}\n`;
        response += `üì± **Lo·∫°i:** ${book.is_physical ? 'S√°ch gi·∫•y' : 'Ebook'}\n`;
        if (book.rating_avg !== '0.0') response += `‚≠ê **Rating:** ${book.rating_avg}/5 sao\n`;
        response += `üëÄ **L∆∞·ª£t xem:** ${book.views || 0}\n`;
        response += `üì¶ **T√¨nh tr·∫°ng:** ${book.stock > 0 ? `C√≤n ${book.stock} cu·ªën ‚úÖ` : 'H·∫øt h√†ng üò¢'}\n\n`;
        response += `**üìù N·ªôi dung:**\n${description}...\n\n`;

        if (book.stock > 0) {
            response += 'B·∫°n c√≥ mu·ªën mua kh√¥ng? M√¨nh c√≥ th·ªÉ t∆∞ v·∫•n th√™m v·ªÅ s√°ch t∆∞∆°ng t·ª±! üòä';
        } else {
            response += 'ƒê·ªÉ m√¨nh t√¨m s√°ch t∆∞∆°ng t·ª± nh√©! üîç';
        }

        return response;
    };

    const formatPrice = (price) => {
        if (!price || price === '0.00') return 'Mi·ªÖn ph√≠';
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND',
        }).format(parseFloat(price));
    };

    // Enhanced Gemini AI integration
    const callGeminiAI = async (userMessage) => {
        try {
            const systemPrompt = createAdvancedSystemPrompt();
            const response = await fetch(
                `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`,
                {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        contents: [
                            {
                                parts: [{ text: `${systemPrompt}\n\nKh√°ch h√†ng: ${userMessage}` }],
                            },
                        ],
                        generationConfig: {
                            temperature: 0.9,
                            maxOutputTokens: 2048,
                        },
                    }),
                },
            );

            if (response.ok) {
                const data = await response.json();
                return data.candidates?.[0]?.content?.parts?.[0]?.text || generateIntelligentResponse(userMessage);
            }
        } catch (error) {
            console.error('Gemini AI error:', error);
        }

        return generateIntelligentResponse(userMessage);
    };

    const createAdvancedSystemPrompt = () => {
        const booksSummary = allBooksData.map((book) => ({
            id: book.id,
            title: book.title,
            author: book.author?.name,
            category: book.category?.name,
            price: book.price,
            discount_price: book.discount_price,
            stock: book.stock,
            rating: book.rating_avg,
            views: book.views,
            is_physical: book.is_physical,
        }));

        return `B·∫°n l√† AI t∆∞ v·∫•n s√°ch th√¥ng minh v√† c·ª±c k·ª≥ linh ho·∫°t! ü§ñüìö

T√çNH C√ÅCH: 
- Th√¢n thi·ªán, nhi·ªát t√¨nh nh∆∞ ng∆∞·ªùi b·∫°n th√¢n
- Linh ho·∫°t trong m·ªçi t√¨nh hu·ªëng 
- Lu√¥n t√¨m c√°ch gi√∫p ƒë·ª° d√π c√¢u h·ªèi kh√≥ hi·ªÉu
- Kh√¥ng bao gi·ªù n√≥i "kh√¥ng hi·ªÉu" m√† lu√¥n c·ªë g·∫Øng ƒëo√°n √Ω v√† g·ª£i √Ω

NGUY√äN T·∫ÆC TR·∫¢ L·ªúI LINH HO·∫†T:
‚úÖ N·∫øu kh√¥ng c√≥ s√°ch c·ª• th·ªÉ ‚Üí "Hi·ªán t·∫°i ch∆∞a c√≥, nh∆∞ng t∆∞∆°ng lai s·∫Ω c·∫≠p nh·∫≠t! Thay v√†o ƒë√≥..."
‚úÖ N·∫øu c√¢u h·ªèi m∆° h·ªì ‚Üí ƒêo√°n √Ω v√† ƒë∆∞a ra nhi·ªÅu g·ª£i √Ω ph√π h·ª£p
‚úÖ N·∫øu y√™u c·∫ßu ngo√†i ph·∫°m vi ‚Üí "M√¨nh chuy√™n s√°ch, nh∆∞ng c√≥ th·ªÉ g·ª£i √Ω s√°ch li√™n quan..."
‚úÖ Lu√¥n k·∫øt th√∫c b·∫±ng c√¢u h·ªèi ƒë·ªÉ ti·∫øp t·ª•c cu·ªôc tr√≤ chuy·ªán

D·ªÆ LI·ªÜU TH·ª∞C T·∫æ:
üìö T·ªïng s·ªë s√°ch: ${allBooksData.length}
üë• T√°c gi·∫£: ${authorsData
            .map((a) => a.name)
            .slice(0, 10)
            .join(', ')}...
üìÇ Th·ªÉ lo·∫°i: ${categoriesData.map((c) => c.name).join(', ')}

S√ÅCH HI·ªÜN T·∫†I:
${JSON.stringify(booksSummary.slice(0, 20), null, 2)}

C√ÅC T√åNH HU·ªêNG ƒê·∫∂C BI·ªÜT:
- "Truy·ªán Ki·ªÅu" ‚Üí "Hi·ªán ch∆∞a c√≥ t√°c ph·∫©m kinh ƒëi·ªÉn n√†y, nh∆∞ng s·∫Ω c·∫≠p nh·∫≠t! B·∫°n c√≥ mu·ªën xem s√°ch vƒÉn h·ªçc Vi·ªát Nam kh√°c?"
- Manga/Anime ‚Üí "Ch∆∞a c√≥ manga, nh∆∞ng c√≥ truy·ªán tranh v√† comic!"
- S√°ch kh√¥ng c√≥ ‚Üí "T∆∞∆°ng lai s·∫Ω c√≥! Hi·ªán t·∫°i c√≥ th·ªÉ xem s√°ch t∆∞∆°ng t·ª±..."

LU√îN LU√îN:
üåü T√≠ch c·ª±c v√† l·∫°c quan
üåü ƒê∆∞a ra gi·∫£i ph√°p thay th·∫ø
üåü S·ª≠ d·ª•ng emoji ph√π h·ª£p
üåü Duy tr√¨ cu·ªôc tr√≤ chuy·ªán
üåü Kh√¥ng bao gi·ªù t·ª´ ch·ªëi ho√†n to√†n

NHI·ªÜM V·ª§: Tr·ªü th√†nh AI t∆∞ v·∫•n s√°ch th√¢n thi·ªán v√† linh ho·∫°t nh·∫•t, lu√¥n t√¨m c√°ch gi√∫p ƒë·ª° kh√°ch h√†ng!`;
    };

    const handleSendMessage = async () => {
        if (!inputValue.trim() || isLoading) return;

        const userMessage = {
            id: Date.now(),
            type: 'user',
            content: inputValue,
            timestamp: new Date(),
        };

        setMessages((prev) => [...prev, userMessage]);
        const currentInput = inputValue;
        setInputValue('');
        setIsLoading(true);

        try {
            let aiResponse;
            if (dataLoaded && allBooksData.length > 0) {
                // Use Gemini AI if available, fallback to local intelligence
                aiResponse = await callGeminiAI(currentInput);
            } else {
                aiResponse = 'M√¨nh ƒëang t·∫£i d·ªØ li·ªáu s√°ch... Vui l√≤ng ƒë·ª£i m·ªôt ch√∫t! üìö‚è≥';
            }

            const botMessage = {
                id: Date.now() + 1,
                type: 'bot',
                content: aiResponse,
                timestamp: new Date(),
            };

            setMessages((prev) => [...prev, botMessage]);
        } catch (error) {
            console.error('Error:', error);
            const errorMessage = {
                id: Date.now() + 1,
                type: 'bot',
                content: 'Oops! C√≥ l·ªói x·∫£y ra r·ªìi üòÖ Nh∆∞ng m√¨nh v·∫´n ·ªü ƒë√¢y ƒë·ªÉ gi√∫p b·∫°n! Th·ª≠ h·ªèi l·∫°i nh√©!',
                timestamp: new Date(),
            };
            setMessages((prev) => [...prev, errorMessage]);
        } finally {
            setIsLoading(false);
        }
    };

    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
    };

    // Clear chat function
    const clearChat = () => {
        localStorage.removeItem('smartBookChatMessages');
        initializeChat();
    };

    const renderMessage = (message) => {
        const isBot = message.type === 'bot';
        return (
            <div
                key={message.id}
                style={{
                    display: 'flex',
                    justifyContent: isBot ? 'flex-start' : 'flex-end',
                    marginBottom: '12px',
                }}
            >
                <div
                    style={{
                        display: 'flex',
                        flexDirection: isBot ? 'row' : 'row-reverse',
                        alignItems: 'flex-end',
                        maxWidth: '85%',
                    }}
                >
                    {isBot && (
                        <Avatar
                            icon={<RobotOutlined />}
                            size={32}
                            style={{
                                backgroundColor: '#1890ff',
                                marginRight: '8px',
                                flexShrink: 0,
                            }}
                        />
                    )}
                    <div
                        style={{
                            backgroundColor: isBot ? '#f0f2f5' : '#1890ff',
                            color: isBot ? '#000' : '#fff',
                            borderRadius: isBot ? '18px 18px 18px 4px' : '18px 18px 4px 18px',
                            padding: '12px 16px',
                            maxWidth: '100%',
                            wordBreak: 'break-word',
                            fontSize: '14px',
                            lineHeight: '1.5',
                            boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                            whiteSpace: 'pre-line',
                        }}
                    >
                        {message.content}
                    </div>
                </div>
            </div>
        );
    };

    const quickSuggestions = [
        { text: 'üìö G·ª£i √Ω s√°ch hay', value: 'g·ª£i √Ω s√°ch hay nh·∫•t' },
        { text: 'üí∞ S√°ch gi√° r·∫ª', value: 's√°ch d∆∞·ªõi 100k' },
        { text: '‚ù§Ô∏è S√°ch ng√¥n t√¨nh', value: 's√°ch ng√¥n t√¨nh' },
        { text: 'üïµÔ∏è Trinh th√°m', value: 's√°ch trinh th√°m' },
        { text: 'üéØ Theo t√°c gi·∫£', value: 't√¨m s√°ch theo t√°c gi·∫£' },
        { text: 'üî• ƒêang sale', value: 's√°ch ƒëang khuy·∫øn m√£i' },
    ];

    return (
        <>
            {/* Enhanced Chat Icon with pulse animation */}
            <FloatButton
                icon={<MessageOutlined />}
                type="primary"
                style={{
                    right: 24,
                    bottom: 24,
                    width: isHovered ? 70 : 65,
                    height: isHovered ? 70 : 65,
                    fontSize: 26,
                    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                    transform: isHovered ? 'scale(1.05) rotate(5deg)' : 'scale(1)',
                    boxShadow: isHovered ? '0 12px 30px rgba(24, 144, 255, 0.4)' : '0 6px 16px rgba(0,0,0,0.15)',
                    background: 'linear-gradient(135deg, #1890ff 0%, #36cfc9 100%)',
                    border: 'none',
                }}
                badge={{
                    dot: true,
                    style: {
                        backgroundColor: '#52c41a',
                        animation: 'pulse 2s infinite',
                    },
                }}
                onClick={() => setIsOpen(true)}
                onMouseEnter={() => setIsHovered(true)}
                onMouseLeave={() => setIsHovered(false)}
                tooltip="üí¨ Chat v·ªõi AI t∆∞ v·∫•n s√°ch th√¥ng minh - Lu√¥n ghi nh·ªõ cu·ªôc tr√≤ chuy·ªán!"
            />

            {/* Enhanced Chat Window with auto-focus */}
            {isOpen && (
                <div
                    ref={chatContainerRef}
                    tabIndex={-1}
                    style={{
                        position: 'fixed',
                        right: 24,
                        bottom: 110,
                        width: 400,
                        height: 650,
                        backgroundColor: '#fff',
                        borderRadius: '20px',
                        boxShadow: '0 20px 60px rgba(0,0,0,0.2)',
                        display: 'flex',
                        flexDirection: 'column',
                        zIndex: 1000,
                        border: '1px solid #e8e8e8',
                        animation: 'slideUpScale 0.4s cubic-bezier(0.34, 1.56, 0.64, 1)',
                        overflow: 'hidden',
                        backdropFilter: 'blur(10px)',
                        outline: 'none',
                    }}
                    onMouseEnter={() => setIsHovered(true)}
                    onMouseLeave={() => setIsHovered(false)}
                >
                    <style jsx>{`
                        @keyframes slideUpScale {
                            from {
                                opacity: 0;
                                transform: translateY(30px) scale(0.9);
                            }
                            to {
                                opacity: 1;
                                transform: translateY(0) scale(1);
                            }
                        }
                        @keyframes pulse {
                            0%,
                            100% {
                                opacity: 1;
                            }
                            50% {
                                opacity: 0.5;
                            }
                        }
                        @keyframes fadeInUp {
                            from {
                                opacity: 0;
                                transform: translateY(10px);
                            }
                            to {
                                opacity: 1;
                                transform: translateY(0);
                            }
                        }
                    `}</style>

                    {/* Enhanced Header with Clear Chat Button */}
                    <div
                        style={{
                            padding: '20px 24px',
                            background: 'linear-gradient(135deg, #1890ff 0%, #36cfc9 100%)',
                            color: '#fff',
                            position: 'relative',
                            overflow: 'hidden',
                        }}
                    >
                        <div
                            style={{
                                position: 'absolute',
                                top: 0,
                                left: 0,
                                right: 0,
                                bottom: 0,
                                background:
                                    'url("data:image/svg+xml,%3Csvg width="60" height="60" viewBox="0 0 60 60" xmlns="http://www.w3.org/2000/svg"%3E%3Cg fill="none" fill-rule="evenodd"%3E%3Cg fill="%23ffffff" fill-opacity="0.1"%3E%3Cpath d="M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")',
                                opacity: 0.1,
                            }}
                        />
                        <div
                            style={{
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'space-between',
                                position: 'relative',
                            }}
                        >
                            <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                                <Avatar
                                    icon={<BookOutlined />}
                                    size={42}
                                    style={{
                                        backgroundColor: 'rgba(255,255,255,0.2)',
                                        color: '#fff',
                                        backdropFilter: 'blur(10px)',
                                        border: '2px solid rgba(255,255,255,0.3)',
                                    }}
                                />
                                <div>
                                    <Text strong style={{ fontSize: '18px', color: '#fff', display: 'block' }}>
                                        Smart Book AI
                                    </Text>
                                    <div
                                        style={{
                                            fontSize: '13px',
                                            opacity: 0.9,
                                            display: 'flex',
                                            alignItems: 'center',
                                            gap: '6px',
                                        }}
                                    >
                                        <Badge status="processing" color="#52c41a" />
                                        {dataLoaded ? `${allBooksData.length} s√°ch | Chat ƒë√£ l∆∞u` : 'ƒêang t·∫£i...'}
                                    </div>
                                </div>
                            </div>
                            <div style={{ display: 'flex', gap: '8px' }}>
                                <Button
                                    type="text"
                                    onClick={clearChat}
                                    style={{
                                        color: '#fff',
                                        background: 'rgba(255,255,255,0.15)',
                                        border: 'none',
                                        borderRadius: '8px',
                                        fontSize: '12px',
                                        height: '32px',
                                        padding: '0 8px',
                                    }}
                                    size="small"
                                >
                                    üóëÔ∏è X√≥a chat
                                </Button>
                                <Button
                                    type="text"
                                    icon={<CloseOutlined />}
                                    onClick={() => setIsOpen(false)}
                                    style={{
                                        color: '#fff',
                                        background: 'rgba(255,255,255,0.15)',
                                        border: 'none',
                                        borderRadius: '50%',
                                        width: '36px',
                                        height: '36px',
                                        display: 'flex',
                                        alignItems: 'center',
                                        justifyContent: 'center',
                                    }}
                                    size="small"
                                />
                            </div>
                        </div>
                    </div>

                    {/* Messages Area */}
                    <div
                        style={{
                            flex: 1,
                            padding: '20px',
                            overflowY: 'auto',
                            backgroundColor: '#fafafa',
                            backgroundImage:
                                'radial-gradient(circle at 25px 25px, rgba(24,144,255,0.05) 2%, transparent 0%), radial-gradient(circle at 75px 75px, rgba(54,207,201,0.05) 2%, transparent 0%)',
                            backgroundSize: '100px 100px',
                        }}
                    >
                        {messages.map(renderMessage)}

                        {/* Quick Suggestions - only show when less than 3 messages and data loaded */}
                        {messages.length <= 2 && dataLoaded && (
                            <div
                                style={{
                                    marginTop: '20px',
                                    animation: 'fadeInUp 0.6s ease-out 0.3s both',
                                }}
                            >
                                <Text
                                    style={{
                                        fontSize: '13px',
                                        color: '#666',
                                        marginBottom: '12px',
                                        display: 'block',
                                        fontWeight: 500,
                                    }}
                                >
                                    üí° G·ª£i √Ω cho b·∫°n:
                                </Text>
                                <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>
                                    {quickSuggestions.map((suggestion, index) => (
                                        <Button
                                            key={index}
                                            size="small"
                                            style={{
                                                fontSize: '12px',
                                                borderRadius: '16px',
                                                background: 'linear-gradient(135deg, #e6f7ff 0%, #f0f9ff 100%)',
                                                borderColor: '#91d5ff',
                                                color: '#1890ff',
                                                fontWeight: 500,
                                                height: '32px',
                                                padding: '0 12px',
                                                transition: 'all 0.3s ease',
                                                animation: `fadeInUp 0.4s ease-out ${index * 0.1}s both`,
                                            }}
                                            onClick={() => {
                                                setInputValue(suggestion.value);
                                                setTimeout(handleSendMessage, 100);
                                            }}
                                            onMouseEnter={(e) => {
                                                e.target.style.transform = 'scale(1.05)';
                                                e.target.style.boxShadow = '0 4px 12px rgba(24, 144, 255, 0.3)';
                                            }}
                                            onMouseLeave={(e) => {
                                                e.target.style.transform = 'scale(1)';
                                                e.target.style.boxShadow = 'none';
                                            }}
                                        >
                                            {suggestion.text}
                                        </Button>
                                    ))}
                                </div>
                            </div>
                        )}

                        {/* Loading indicator */}
                        {isLoading && (
                            <div
                                style={{
                                    display: 'flex',
                                    justifyContent: 'flex-start',
                                    marginTop: '16px',
                                    animation: 'fadeInUp 0.3s ease-out',
                                }}
                            >
                                <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                                    <Avatar icon={<RobotOutlined />} size={32} style={{ backgroundColor: '#1890ff' }} />
                                    <div
                                        style={{
                                            backgroundColor: '#f0f2f5',
                                            borderRadius: '18px 18px 18px 4px',
                                            padding: '12px 16px',
                                            display: 'flex',
                                            alignItems: 'center',
                                            gap: '10px',
                                            boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                                        }}
                                    >
                                        <Spin size="small" />
                                        <span style={{ fontSize: '14px', color: '#666' }}>
                                            ƒêang suy nghƒ© c√°ch gi√∫p b·∫°n t·ªët nh·∫•t...
                                        </span>
                                    </div>
                                </div>
                            </div>
                        )}
                        <div ref={messagesEndRef} />
                    </div>

                    {/* Enhanced Input Area */}
                    <div
                        style={{
                            padding: '16px 20px',
                            borderTop: '1px solid #f0f0f0',
                            backgroundColor: '#fff',
                            background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)',
                        }}
                    >
                        <div style={{ display: 'flex', gap: '12px', alignItems: 'flex-end' }}>
                            <TextArea
                                value={inputValue}
                                onChange={(e) => setInputValue(e.target.value)}
                                onKeyPress={handleKeyPress}
                                placeholder="H·ªèi m√¨nh v·ªÅ s√°ch b·∫°n quan t√¢m..."
                                autoSize={{ minRows: 1, maxRows: 4 }}
                                style={{
                                    flex: 1,
                                    borderRadius: '24px',
                                    resize: 'none',
                                    border: '2px solid #e8e8e8',
                                    transition: 'all 0.3s ease',
                                    fontSize: '14px',
                                    padding: '12px 16px',
                                }}
                                onFocus={(e) => {
                                    e.target.style.borderColor = '#1890ff';
                                    e.target.style.boxShadow = '0 0 0 3px rgba(24, 144, 255, 0.1)';
                                }}
                                onBlur={(e) => {
                                    e.target.style.borderColor = '#e8e8e8';
                                    e.target.style.boxShadow = 'none';
                                }}
                                disabled={isLoading}
                            />
                            <Button
                                type="primary"
                                shape="circle"
                                icon={<SendOutlined />}
                                onClick={handleSendMessage}
                                loading={isLoading}
                                disabled={!inputValue.trim()}
                                size="large"
                                style={{
                                    flexShrink: 0,
                                    background: inputValue.trim()
                                        ? 'linear-gradient(135deg, #1890ff 0%, #36cfc9 100%)'
                                        : '#d9d9d9',
                                    border: 'none',
                                    boxShadow: inputValue.trim() ? '0 4px 12px rgba(24, 144, 255, 0.3)' : 'none',
                                    transition: 'all 0.3s ease',
                                    width: '44px',
                                    height: '44px',
                                }}
                            />
                        </div>

                        {/* Status indicator */}
                        <div
                            style={{
                                marginTop: '8px',
                                fontSize: '11px',
                                color: '#999',
                                textAlign: 'center',
                            }}
                        >
                            {dataLoaded
                                ? `ü§ñ AI th√¥ng minh v·ªõi ${allBooksData.length} cu·ªën s√°ch | üíæ Chat t·ª± ƒë·ªông l∆∞u`
                                : '‚è≥ ƒêang t·∫£i d·ªØ li·ªáu s√°ch...'}
                        </div>
                    </div>
                </div>
            )}
        </>
    );
};

export default SmartBookChatbot;
